{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsWithProperty","map","good","i","id","name","length","App","useState","toDefault","sortField","setSortField","isReversed","setIsReversed","sortedGoodsList","goods","sortName","reverse","prepearedGoods","sort","good1","good2","localeCompare","prepeareGoods","className","type","cn","onClick","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,oFAAAA,K,YAAAA,E,gBAAAA,E,cAAAA,M,KAcL,IAAMC,EA3BmC,CACvC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAkBCC,KAAI,SAACC,EAAMC,GAAP,MAAc,CACjBC,GAAID,EAAI,EACRE,KAAMH,EACNI,OAAQJ,EAAKI,WAgCV,IAAMC,EAAM,WACjB,MAAkCC,mBAAST,EAASU,WAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EAhCR,SACEC,EACAC,EACAC,GAEA,IAAIC,EAAc,YAAOH,GAqBzB,OAnBIC,GACFE,EAAeC,MAAK,SAACC,EAAOC,GAC1B,OAAQL,GACN,KAAKjB,EAASM,KACZ,OAAOe,EAAMrB,EAASM,MAAMiB,cAAcD,EAAMtB,EAASM,OAE3D,KAAKN,EAASO,OACZ,OAAOc,EAAMrB,EAASO,QAAUe,EAAMtB,EAASO,QAEjD,QACE,OAAO,MAKXW,IACFC,EAAiBA,EAAeD,WAG3BC,EAMiBK,CACtBvB,EACAU,EACAE,GAOF,OACE,sBAAKY,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,SAAU,UAAW,CACjC,WAAYhB,IAAcX,EAASM,OAErCsB,QAAS,kBAAMhB,EAAaZ,EAASM,OALvC,iCAUA,wBACEoB,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,WAAYhB,IAAcX,EAASO,SAErCqB,QAAS,kBAAMhB,EAAaZ,EAASO,SALvC,4BAUA,wBACEmB,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,YAAad,IAEfe,QAAS,kBAAOd,GAAeD,IALjC,sBAUEF,GAAaE,IACb,wBACEa,KAAK,SACLD,UAAU,4BACVG,QA1CI,WACZhB,EAAaZ,EAASU,WACtBI,GAAc,IAqCR,sBAUJ,6BACGC,EAAgBb,KAAI,SAAAC,GAAI,OACvB,oBAAI,UAAQ,OAAZ,SAAkCA,EAAKG,MAAfH,EAAKE,aC7HvCwB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.8537e132.chunk.js","sourcesContent":["import { useState } from 'react';\nimport cn from 'classnames';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  name = 'name',\n  length = 'length',\n  toDefault = '',\n}\n\ninterface Good {\n  id: number;\n  name: string;\n  length: number;\n}\n\ntype Goods = Good[];\n\nconst goodsWithProperty: Goods = goodsFromServer\n  .map((good, i) => ({\n    id: i + 1,\n    name: good,\n    length: good.length,\n  }));\n\nfunction prepeareGoods(\n  goods: Goods,\n  sortName: SortType,\n  reverse: boolean,\n): Goods {\n  let prepearedGoods = [...goods];\n\n  if (sortName) {\n    prepearedGoods.sort((good1, good2) => {\n      switch (sortName) {\n        case SortType.name:\n          return good1[SortType.name].localeCompare(good2[SortType.name]);\n\n        case SortType.length:\n          return good1[SortType.length] - good2[SortType.length];\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverse) {\n    prepearedGoods = prepearedGoods.reverse();\n  }\n\n  return prepearedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState(SortType.toDefault);\n  const [isReversed, setIsReversed] = useState(false);\n  const sortedGoodsList = prepeareGoods(\n    goodsWithProperty,\n    sortField,\n    isReversed,\n  );\n  const reset = () => {\n    setSortField(SortType.toDefault);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button', 'is-info', {\n            'is-light': sortField !== SortType.name,\n          })}\n          onClick={() => setSortField(SortType.name)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-success', {\n            'is-light': sortField !== SortType.length,\n          })}\n          onClick={() => setSortField(SortType.length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={() => (setIsReversed(!isReversed))}\n        >\n          Reverse\n        </button>\n\n        {(sortField || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {sortedGoodsList.map(good => (\n          <li data-cy=\"Good\" key={good.id}>{good.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}